program = _{ SOI ~ code ~ EOI }

code = _{ NEWLINE* ~ (expr ~ ";"? ~ NEWLINE+)* ~ expr? }
// Expression(Generic)
expr = {
    declarationExpr
  | assgmtExpr
  | unaryOperation
  | functions
  | keywords
  | monadicExpr
  | dyadicExpr
  | value
  | terms
  | mathExpr
}
// Keywords
keywords = {
    forLoop
  | ifLogic
  | fnCall
  | functionLogic
}

functions = {
    print
}

stmt = {
    "const"
  | "let"
  | "for"
  | "if"
  | "else if"
  | "else"
  | "fn"
}
// Functions
print = { "print" ~ "(" ~ code ~ ")" }

// Keywords logic
forLoop = { stmt ~ ident ~ "in" ~ expr ~ NEWLINE* ~ "{" ~ code ~ "}" }

ifLogic = { "if" ~ ("(" ~ expr ~ ")" | expr) ~ (NEWLINE | WHITESPACE)* ~ block ~ ("else" ~ NEWLINE* ~ block)? }

functionLogic = { stmt ~ ident ~ "(" ~ functionArgs? ~ ")" ~ NEWLINE* ~ block? }
fnCall        = { ident ~ "(" ~ functionArgs? ~ ")" }
functionArgs  = { NEWLINE* ~ (code) ~ ("," ~ (code))* }

// Code block
block = _{ "{" ~ code ~ "}" }

// expressions(Logic)
monadicExpr = { verb ~ expr }

dyadicExpr = { (boolean | monadicExpr | terms | number | string) ~ (logicOperators | verb) ~ expr }
// Math expression
mathExpr = { atom ~ (operators ~ atom)* }

// Terms
terms = { term+ }

term = _{ objectProp | ident | "(" ~ expr ~ ")" }

unaryOperation = { ((value | ident) ~ unaryOpearators) | (unaryOpearators ~ (ident | value)) }
// Variables

modifier        = { "const" | "let" }
declarationExpr = { modifier ~ ident ~ "=" ~ expr }
assgmtExpr      = { ident ~ "=" ~ expr }

verb = {
    plus
  | multiply
  | range
  | increment
  | decrement
  | not
  | objectAccess
}

// Unary operators
unaryOpearators = { increment | decrement }

// Unary operators

not          = { "!" }
increment    = { "++" }
decrement    = { "--" }
range        = { ".." }
objectAccess = { "." }

// Logic operators
logicOperators = { and | or | lt | lte | gt | gte | eq | neq }

and = { "and" | "&&" }
or  = { "or" | "||" }
lt  = { "<" }
lte = { "<=" }
gt  = { ">" }
gte = { ">=" }
eq  = { "==" }
neq = { "!=" | "<>" }

// Math operators
operators = _{ add | subtract | multiply | divide | modulo }
add       =  { "+" }
plus      =  { "+" }
multiply  =  { "*" }
subtract  =  { "-" }
divide    =  { "/" }
modulo    =  { "%" }

// Indentificators
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// value types
value = { fnCall | objectProp | object | array | string | mathExpr | boolean | null | ident }

// Parsers

// Simple

boolean = { "true" | "false" }
null    = { "null" }

// Could be a negative or positive number
number = { unary_minus? ~ numericChar }
// "negate" a number
unary_minus = { "-" }
// Define char that match a number
numericChar = @{ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ (("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+))? }

primary = _{ number | "(" ~ expr ~ ")" }
atom    = _{ unary_minus? ~ primary }

string = @{ "\"" ~ ("\\\"" | "\\\\" | (!"\"" ~ ANY))* ~ "\"" }
// Complex types
object = {
    "{" ~ "}"
  | "{" ~ NEWLINE* ~ (pairMultiLine) ~ ("," ~ pairMultiLine)* ~ "}"
}

objectProp = { ident ~ objectAccess ~ (objectProp | ident) }

pairMultiLine = _{ NEWLINE* ~ (pair ~ ","? ~ NEWLINE+)* ~ pair? }

pair = { (ident | "\"" ~ ident ~ "\"") ~ ":" ~ code }

array = {
    "[" ~ NEWLINE* ~ "]"
  | "[" ~ NEWLINE* ~ (value) ~ ("," ~ (code))* ~ NEWLINE* ~ "]"
}

// We can't have SOI and EOI on expr directly, because it is used recursively (e.g. with parentheses)
// program = _{ SOI ~ expr ~ EOI }

WHITESPACE = _{ " " | "\t" }

COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
